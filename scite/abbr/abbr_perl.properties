head=#!perl\n# $(FileNameExt)        (c) $(yy) Beaver\n# syntax: perl $(FileNameExt) params\n#\n# Description\n#\n\n|\n
todo=# TODO: |
if=if(|) {\n    \n}
else=else {\n    |\n}
while=while(|) {\n    ??\n}
for=for my $| (??) {\n    ??\n}
ret=return |;
p=print "|\\n";
po=print $out "|\\n";
getopt=use Getopt::Long;\nuse Pod::Usage;\n\nmy %args = ();\nGetOptions(\\%args,\n    'help' => sub { help() },\n    'perm:s',\n    'update',\n) or help("Commandline parsing failed");\n\n|\n\n# show message and usage instructions\nsub help {\n    my $msg = shift;\n    if($msg) {\n        warn "Error: $msg\\n\\n";\n    }\n    pod2usage(1);\n}\n\n=head1 NAME\n\n$(FileNameExt) -- ??\n\n=head1 SYNOPSIS\n\n$(FileNameExt) [options] [file]\n\n=head1 OPTIONS\n\n=over 8\n\n=item B<-perm> or B<-p>\n\nName of file.\n\n=item B<-help>\n\nPrint a brief help message and exits.\n\n=back\n\n=head1 DESCRIPTION\n\n??\n\n=head1 AUTHOR\n\nRoman Hubacek\n\n=cut\n
utf=use Encode; \nEncode::from_to(|,"utf-8","cp1250");\n
data=while(<DATA>) {\n	|\n}\n\n__DATA__\n
lwp=use LWP::Simple;\n\n$contents = get("|");
'='|'
"="|"
trim=s/^\s+|\s+$//g

# dump

yml=use YAML::Syck;\nprint Dump |;
dumpe=use Devel::Dwarn;\n\nDwarn(|);\n
dump=use Data::Dump;\ndd |;\n
dumpv=use Dumpvalue;\nmy $dumper = new Dumpvalue(hashDepth => 10, arrayDepth => 10, unctrl => 1);\n$dumper->dumpValue(|);

# files

ffind=use File::Find;\n\nfind(sub { push @files,$File::Find::name; }, ".");\n
filei=my $file = "|";\n{\n    open my $in,"<",$file or die "$file: $!";\n    while(<$in>) {\n	    chomp;\n	    ??\n    }\n}\n
slurp= = do { local $/; <$in> };
slurpi= = do { local $/; open my $in,"<",$file or die "$file: $!"; <$in> };
op=open my $in,"<","|" or die;
opo=open my $out,">","|" or die;
cl=close $in;
clo=close $out;
files=@files = <|*.*>;\nfor $file (@files) {\n	\n}\n

# html

html=use HTML::TreeBuilder;\nmy $tree = HTML::TreeBuilder->new_from_file("|");\n\n
hcont=my $tree = HTML::TreeBuilder->new_from_content("|");
hat=->as_text();
hah=->as_HTML('<>&',"\\t");
hld=for my $| ($tree->look_down("_tag"=>"??", ??)) {\n\t??\n}

# xml

xml=use XML::Twig;\n\nmy $content = do { local $/; <DATA> };\n\nXML::Twig->new(twig_handlers => {\n    definition => sub {\n        my $attr = $_->att('some');\n        my $text = $_->first_child_trimmed_text('text');\n        $_->purge;\n    },\n})->parsestring($content);

# dbi shortcuts

dbi=use DBI;\n\n# configuration\nmy %mysql = (\n	server => "nore.cas.honeywell.com",\n	user   => 'DD_REPORTS',\n	pass   => 'DD_REPORTS',\n);\n\n# connect into given database\n$dm = DBI->connect("DBI:mysql:$db:$mysql{server}",$mysql{user},$mysql{pass})\n	or die("Connect error: $DBI::errstr");\n\n# disconnect from database\n$dm->disconnect();\n
selall=my $items = $dm->selectall_arrayref("\n\n	|SELECT name,description,SMT_PartitionID as smt_partid FROM partitions\n	\n", {Slice=>{}});\n\nfor my $item (@$items) {\n	$item->{name};\n}\n
select=SELECT * \n	FROM |\n	WHERE ??\n	ORDER BY ??\n
ljoin=LEFT JOIN | ON ??

# OO approach

selfm=my ($self,|) = @_;
self=my $self = shift;
meth=sub | {\n\tmy ($self) = @_;\n\t??\n}\n
subs=sub | {\n\tmy ($self,??) = @_;\n\t??\n}\n
sub=sub | {\n\tmy (??) = @_;\n\t??\n}\n
pack=package $(namespace)$(FileName);\n\n|\n\n1;
mod=package $(namespace)$(FileName);\n\nuse strict;\nuse warnings;\n\nuse base qw{Exporter};\n\nour $VERSION = '0.01';\nour @EXPORT_OK = qw{};\n\n|\n\n1;\n
class=package $(namespace)$(FileName);\nuse Moose;\n|\n\n__PACKAGE__->meta->make_immutable();\n\n1;\n
role=package $(namespace)$(FileName);\nuse Moose::Role;\n\n|\n\n1;\n
has=has | => (is => 'ro');
hasa=has | => (\n    traits => ['Array'],\n    is        => 'rw',\n    isa       => 'ArrayRef[??]',\n    handles  => {\n        list_?? => 'elements',\n        add_?? => 'push',\n    },\n);
hash=has | => (\n    traits => ['Hash'],\n    is      => 'rw',\n    isa     => 'HashRef[??]',\n    handles => {\n        list_?? => 'keys',\n        has_??s => 'count',\n        ??   => 'get',\n        set_??   => 'set',\n    },\n);
default=default => sub { | },
imm=__PACKAGE__->meta->make_immutable();
elem=# $(FileName) (|) doctype\n# anchor and document classes\n\npackage B787::Role::$(FileName);\nuse Moose::Role;\n\nsub doctype_re { qr/??/ }\n\n\n# Anchor\n\npackage $(namespace)$(FileName);\n{\n    use Moose;\n    extends 'B787::Elem::Anchor';\n    with    'B787::Role::$(FileName)';\n\n    __PACKAGE__->define(name => '$(FileName) Anchor', url => '$(FileName)');\n\n    sub gtt_fill_color { '??' }\n\n    __PACKAGE__->meta->make_immutable();\n}\n\n# Document\n\npackage $(namespace)Doc$(FileName);\n{\n    use Moose;\n    extends 'B787::Elem::Document';\n    with    'B787::Role::$(FileName)';\n\n    __PACKAGE__->define(name => '$(FileName) Document', url => '$(FileName)_doc');\n\n    sub gtt_fill_color { '??' }\n\n    __PACKAGE__->meta->make_immutable();\n}\n\n1;\n
mss=use Method::Signatures::Simple;

# POD documentation

h1==head1 |\n\n??
h2==head2 |\n\n??
h3==head3 |\n\n??
cut==cut\n
b=B<|>
c=C<|>
l=L<|>
pod==head1 NAME\n\n$(namespace)$(FileName) - ??\n\n=head1 SYNOPSIS\n\n??\n\n=head1 DESCRIPTION\n\n??\n\n=head1 CONSTRUCTOR\n\n=head1 METHODS\n\n??\n\n=cut
li==item * |
over==over\n\n=item * |\n\n=back

# other modules

carp=use Carp qw(:all);\n\ncluck carp croak confess\n
test=BEGIN { chdir 't' if -d 't' }\nuse lib '..';\nuse Test::More;\nuse Data::Dump qw{dump};\n\n|\n\ndone_testing;\n

# debugging hooks

dieh=local $SIG{'__DIE__'} = sub {\n    warn "Error: $_[0]\\n";\n    use Carp qw{cluck};\n    cluck "Stack backtrace:\\n";\n};

# tables
table=use Text::TabularDisplay;\n\nmy $table = Text::TabularDisplay->new(qw{ Col1 Col2 | });\n$table->add(@cols);\nprint $table->render,"\\n";
astable=use ActiveState::Table;\n\nmy $table = ActiveState::Table->new;\n$table->add_field($_) for qw(Col1 |);\n$table->add_row({ Col1 => $item, ?? ... });\n$table->add_sep;\n$table->as_box(show_trailer => 0, align => { Col1 => 'right' }, box_chars => 'unicode');
